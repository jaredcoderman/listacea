// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Item {
  id Int @id @default(autoincrement()) 
  createdAt  DateTime? @default(now())
  name String
  purchased Boolean @default(false)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
}

model Category {
  id Int @id @default(autoincrement()) 
  createdAt  DateTime? @default(now())
  name String @db.VarChar(20)
  list List? @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId Int?
  index Int? @default(0)
  items Item[]
}

model Recipe {
  id Int @id @default(autoincrement()) 
  createdAt  DateTime? @default(now())
  steps String[]
  ingredients String[]
  name String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model List {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime?    @default(now())
  name        String
  changesNotified Boolean? @default(false)
  users       ListToUser[] 
  ownerEmail  String?
  categories  Category[]
}

model ListToUser {
  id        Int   @id @default(autoincrement())
  list      List @relation(fields: [listId], references: [id])
  listId    Int
  user      User @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime? @default(now())

  @@unique([listId, userId])
}

model Notification {
  id        Int   @id @default(autoincrement())
  description String
  seen Boolean? @default(false)
  createdAt  DateTime   @default(now())
  image String?
  user User @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? 
  createdAt  DateTime   @default(now())
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  lists         ListToUser[]
  notifications Notification[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}